1) directive: {type: directive, keyword: "keyword_of_directive", value: "<value_of_directive>"}
    example -  {type: directive, keyword: "include", name: "<iostream>"
    is_completed: false

2) using namespace: {type: using_namespace, name: "name_of_namespace"
    example - {type: using_namespace, name: "std"}
    is_completed: false

3) function: {type: function, name: "<name_func>" params: {"Пока без параметров"}, return_type: "int", body:
[<array_of_body>]
    example - Будет добавлено позже
    is_completed: false

4) variable_declaration: {type: var_declaration, value_type: "<value_type>", name: "<var_name>",
              body: <number, string, object with math operations (or more) or empty>
              }
    example - {type: var, value_type: "int", name: "a", body: undefined}
    выглядит: int a;
    is_completed: true

5) variable_assigning: {type: var_assigning, name: "var_name", body: <not_undefined body>}
    example: {type: var_assigning, name: "a", body: 10}
    выглядит: a = 10;
    is_completed: false

6) variable_using: {type: var_using, name: "var_name"}
    example: {type: var_using, name: "a"}
    is_completed: true

7) output: {type: output, name: "name_of_output", body: []
    пример: {type: output, name: "cout", body: ["Hello world", {type: manipulator, name: "endl"}]
    выглядит: cout << "Hello world" << endl;
    is_completed: true

8) manipulator_and_keywords: {type: manipulator_and_keywords, name: "<name_of_manip>"}
    example: {type: manipulator_and_keywords, name: "endl"}
    выглядит: endl
    is_completed: true

9) primitive_operator: {type: primitive_operator, operator: "<operator>", first: <body_of_first_operand>, second:
<body_of_second_operand>, withBraces: true}
    example: {type: sum, operator: "+", first: 5, second: 4}
    выглядит: 5 + 4
    is_completed: true

10) return: {type: return, body: {}}
    is_completed: true

11) unary_operator: {type: unary_operator, operator: "-" (-, !, post++, post--, ++, --), body,
elem.withBraces: true}

12) loop_for: {
    type: "for",
    iterator: {type: var_declaration ...}
    condition: {type: primitive_operator}
    increment: {type: unary_operator, "post++", {type: variable_using, "i"}
    inner_curly_braces_count: 1
    body: []
}

13) call_func: {
    type: "call_func",
    name: "fibonacci",
    params: ["param1"]
}

//-------------------- Указатели (Pointers) ------------------------ //

1) array_declaration: {
    type: "array_declaration",
    value_type: "int",
    name: "arr",
    count: "5" (-1 for empty "[]". for example: int arr[] = {5, 2, -2, 0, 5}),
    // elems:
    body: [5,2,7,4] (or body)
}
    выглядит: int arr[5] = {5, 2, 7, 4}

2) new_operator: {
    type: "new",
    value_type: "int"
    count: 5 (если -1, то не будет квадратных скобок)
}

3) delete_operator: {
    type: "delete",
    isArray: false (если true, то будут добавлены квадратные скобки
    body
}